// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// solve_QP
Rcpp::List solve_QP(Rcpp::NumericMatrix Sigma, double bound, int maxiter, Rcpp::NumericVector theta, Rcpp::NumericVector linear_func, Rcpp::NumericVector gradient, Rcpp::IntegerVector ever_active, Rcpp::IntegerVector nactive, double kkt_tol, double objective_tol);
RcppExport SEXP _selectiveInference_solve_QP(SEXP SigmaSEXP, SEXP boundSEXP, SEXP maxiterSEXP, SEXP thetaSEXP, SEXP linear_funcSEXP, SEXP gradientSEXP, SEXP ever_activeSEXP, SEXP nactiveSEXP, SEXP kkt_tolSEXP, SEXP objective_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type linear_func(linear_funcSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ever_active(ever_activeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type nactive(nactiveSEXP);
    Rcpp::traits::input_parameter< double >::type kkt_tol(kkt_tolSEXP);
    Rcpp::traits::input_parameter< double >::type objective_tol(objective_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_QP(Sigma, bound, maxiter, theta, linear_func, gradient, ever_active, nactive, kkt_tol, objective_tol));
    return rcpp_result_gen;
END_RCPP
}
// find_one_row_debiasingM
Rcpp::List find_one_row_debiasingM(Rcpp::NumericMatrix Sigma, int row, double bound, int maxiter, Rcpp::NumericVector theta, Rcpp::NumericVector gradient, Rcpp::IntegerVector ever_active, Rcpp::IntegerVector nactive, double kkt_tol, double objective_tol);
RcppExport SEXP _selectiveInference_find_one_row_debiasingM(SEXP SigmaSEXP, SEXP rowSEXP, SEXP boundSEXP, SEXP maxiterSEXP, SEXP thetaSEXP, SEXP gradientSEXP, SEXP ever_activeSEXP, SEXP nactiveSEXP, SEXP kkt_tolSEXP, SEXP objective_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< int >::type row(rowSEXP);
    Rcpp::traits::input_parameter< double >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type ever_active(ever_activeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type nactive(nactiveSEXP);
    Rcpp::traits::input_parameter< double >::type kkt_tol(kkt_tolSEXP);
    Rcpp::traits::input_parameter< double >::type objective_tol(objective_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(find_one_row_debiasingM(Sigma, row, bound, maxiter, theta, gradient, ever_active, nactive, kkt_tol, objective_tol));
    return rcpp_result_gen;
END_RCPP
}
// update1_
Rcpp::List update1_(Rcpp::NumericMatrix Q2, Rcpp::NumericVector w, int m, int k);
RcppExport SEXP _selectiveInference_update1_(SEXP Q2SEXP, SEXP wSEXP, SEXP mSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Q2(Q2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(update1_(Q2, w, m, k));
    return rcpp_result_gen;
END_RCPP
}
// downdate1_
Rcpp::List downdate1_(Rcpp::NumericMatrix Q1, Rcpp::NumericMatrix R, int j0, int m, int n);
RcppExport SEXP _selectiveInference_downdate1_(SEXP Q1SEXP, SEXP RSEXP, SEXP j0SEXP, SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Q1(Q1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type j0(j0SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(downdate1_(Q1, R, j0, m, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_selectiveInference_solve_QP", (DL_FUNC) &_selectiveInference_solve_QP, 10},
    {"_selectiveInference_find_one_row_debiasingM", (DL_FUNC) &_selectiveInference_find_one_row_debiasingM, 10},
    {"_selectiveInference_update1_", (DL_FUNC) &_selectiveInference_update1_, 4},
    {"_selectiveInference_downdate1_", (DL_FUNC) &_selectiveInference_downdate1_, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_selectiveInference(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
